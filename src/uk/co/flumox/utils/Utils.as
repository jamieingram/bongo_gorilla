package uk.co.flumox.utils {	import com.carlcalderon.arthropod.Debug;		import flash.display.BitmapData;	import flash.display.DisplayObjectContainer;	import flash.display.MovieClip;	/**	 * @author jamieingram	 */	public class Utils {		// 		public static function VALIDATE_EMAIL(email_str:String):Boolean {			if (email_str.length < 5) return false;			// 			var atPos:Number = email_str.indexOf("@");			var dotPos:Number = email_str.indexOf(".");			// 			if (atPos <= 0 || dotPos <= 0) return false;			// 			if (atPos == email_str.length - 1 || dotPos == email_str.length - 1 ) return false;			// 			var chars_array:Array = [",", ":", " "];			for (var i:Number = 0; i < chars_array.length; i++) {				if (email_str.indexOf(chars_array[i]) != -1) return false;			}			// 			for (var j:Number = 0;j < email_str.length; j++) {				if ((email_str.charAt(j) == "." || email_str.charAt(j) == "@") && email_str.charAt(j) == email_str.charAt(j - 1)) {					return false;				}			}			// 			if (email_str.split("@")[1].indexOf(".") <= 0) {				return false;			}			// 			return true;		}		// 		public static function GENERATE_DUMMY_MOVIE():MovieClip {			var dummy_mc:MovieClip = new MovieClip();			dummy_mc.graphics.beginFill(0xFF0000, 1);			dummy_mc.graphics.drawRect(0, 0, 50, 50);			dummy_mc.graphics.endFill();			return dummy_mc;		}		// 		public static function REMOVE_CHILDREN($container_do:DisplayObjectContainer):void {			while ($container_do.numChildren > 0) {				try {					$container_do.removeChildAt(0);				} catch ($e:Error) {					Debug.warning("Utils.REMOVE_CHILDREN : cannot remove " + $container_do.getChildAt(0) + " from " + $container_do);				}			}		}		// 		public static function GET_NUMBER_SUFFIX($num_int:int):String {			var num_str:String = String($num_int);			var suffix_str:String = "th";			var lastNum_int:int = int(num_str.charAt(num_str.length - 1));			if (lastNum_int == 1 && $num_int != 11) {				suffix_str = "st";			} else if (lastNum_int == 2 && $num_int != 12) {				suffix_str = "nd";			} else if (lastNum_int == 3 && $num_int != 13) {				suffix_str = "rd";			}			// 			return suffix_str;		}		//		public static function RANDOMISE_ARRAY($original_array:Array):Array {			var randomised_array:Array = new Array();			while ($original_array.length > 0) {				var r:int = Math.floor(Math.random() * $original_array.length);				randomised_array.push($original_array[r]);				$original_array.splice(r, 1);			}			return randomised_array;		}		// 		public static function PARSE_PARAMS($params_list:XMLList):Object {			var params_obj:Object = new Object();			for (var i:int = 0 ; i < $params_list.length() ; i++) {				var param:XML = $params_list[i];				// Debug.log(""+param.@id+" __ "+param.toString());				if (param.@id != undefined) {					var id_str:String = param.@id.toString();					switch (param.@type.toString()) {						case "int":							params_obj[id_str] = int(param.toString());							break;						case "number":							params_obj[id_str] = Number(param.toString());							break;						case "bool":							if (param.toString() == "true" || param.toString() == "1") {								params_obj[id_str] = true;							} else {								params_obj[id_str] = false;							}							break;						default:							params_obj[id_str] = param.toString();							break;					}				}			}			return params_obj;		}		// 		public static function GET_AVERAGE_COLOUR(source:BitmapData):uint {			var red:Number = 0;			var green:Number = 0;			var blue:Number = 0;			//			var count:Number = 0;			var pixel:Number;			//			for (var x:int = 0; x < source.width; x++) {				for (var y:int = 0; y < source.height; y++) {					pixel = source.getPixel(x, y);					red += pixel >> 16 & 0xFF;					green += pixel >> 8 & 0xFF;					blue += pixel & 0xFF;					count++;				}			}			//			red /= count;			green /= count;			blue /= count;			//			return red << 16 | green << 8 | blue;		}	}}