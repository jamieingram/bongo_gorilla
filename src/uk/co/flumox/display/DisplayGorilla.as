package uk.co.flumox.display {    import com.greensock.easing.Elastic;        import flash.display.MovieClip;    import flash.events.Event;    import flash.events.MouseEvent;    import flash.events.TimerEvent;    import flash.media.Microphone;    import flash.media.SoundTransform;    import flash.ui.Mouse;    import flash.utils.Timer;        import org.osflash.signals.Signal;        import uk.co.flumox.data.DataConfigManager;    import uk.co.flumox.utils.Defines;    import uk.co.flumox.utils.SkinManager;
    	public class DisplayGorilla extends Display {                public var positionSignal:Signal;        //        private var _timer:Timer;        private var _blink_timer:Timer;        private var _idle_timer:Timer;        //        private var _faceElements_obj:Object;        //        private var _content_mc:MovieClip;        //        private var _mask_mc:MovieClip;        private var _rightEyeLid_mc:MovieClip;        private var _leftEyeLid_mc:MovieClip;        //        private var _mic:Microphone;        private var _currentVolume_num:Number;        //        private var _currentAnim_str:String;        public function DisplayGorilla() {			super();            init();		}        //        protected override function init():void {            super.init();            //            positionSignal = new Signal(Number,Number);            //            _content_mc = SkinManager.GET_INSTANCE().getMovieAsset("MovieClipGorilla");            _mask_mc = GET_MOVIE(_content_mc, "mask_mc");            var height_int:int = DataConfigManager.GET_INSTANCE().getConfigInt(Defines.CONFIG_FULL_HEIGHT);            if  (height_int == 0) height_int = Defines.FULL_HEIGHT_INT;            _content_mc.scaleY = height_int / _mask_mc.height;            _content_mc.scaleX = _content_mc.scaleY;            addChild(_content_mc);            //            _faceElements_obj = {};            //            //brow            var item:DisplayFaceComponent = new DisplayFaceComponent(GET_MOVIE(_content_mc, "brow_mc"));            item.setOffset("idle", {y:-10});            item.setOffset("up", {y:-40});            item.setOffset("down", {y:80, scaleX:-0.1});            _faceElements_obj["brow"] = item;            //nose            item = new DisplayFaceComponent(GET_MOVIE(_content_mc, "nose_mc"));            item.setOffset("idle", {scaleX:-0.03, scaleY:0.03, y:-18});            item.setOffset("up", {y:-10});            item.setOffset("down", {scaleX:0.08, scaleY:-0.11});            _faceElements_obj["nose"] = item;            //jaw            item = new DisplayFaceComponent(GET_MOVIE(_content_mc, "jaw_mc"));            item.setOffset("idle", {y:-8});            item.setOffset("up", {y:10});            _faceElements_obj["jaw"] = item;            var processEyeElements = function ($scope:DisplayGorilla, $eye_mc:MovieClip, $pos_str:String) {                var item:DisplayFaceComponent = new DisplayFaceComponent($eye_mc);                _faceElements_obj[$pos_str + "Eye"] = item;                var content_mc:MovieClip = GET_MOVIE($eye_mc, "content_mc");                var eye_mc:MovieClip = GET_MOVIE(content_mc, "eye_mc");                $scope["_"+$pos_str+"EyeLid_mc"] = GET_MOVIE(eye_mc, "eyeLid_mc");                //pupil                item = new DisplayFaceComponent(GET_MOVIE(eye_mc, "pupil_mc"));                if ($pos_str == "right") {                    item.setOffset("up",{y:-30,rotation:-20});                    item.setOffset("idle",{y:-10});                    item.setOffset("down",{y:20,rotation:-6,scaleY:-0.1});                }else{                    item.setOffset("up",{y:-30});                    item.setOffset("idle",{y:-10});                    item.setOffset("down",{y:5,rotation:2,scaleY:-0.1});                }                _faceElements_obj[$pos_str + "Pupil"] = item;                //eye ball                var ball_mc:MovieClip = GET_MOVIE(eye_mc, "ball_mc")                item = new DisplayFaceComponent(ball_mc);                item.setOffset("up",{y:-30});                item.setOffset("down", {scaleY:-0.2,y:40});                _faceElements_obj[$pos_str + "EyeBall"] = item;                //eye ball red                var ballContent_mc:MovieClip = GET_MOVIE(ball_mc, "content_mc");                var innerContent_mc:MovieClip = GET_MOVIE(ballContent_mc, "inner_mc");                item = new DisplayFaceComponent(GET_MOVIE(innerContent_mc, "red_mc"));                item.setOffset("down",{alpha:1});                _faceElements_obj[$pos_str + "EyeBallRed"] = item;                //eye socket                item = new DisplayFaceComponent(GET_MOVIE(eye_mc, "socket_mc"), true);                if ($pos_str == "right") {                    item.setOffset("up", {rotation:-10, scaleY: 0.17});                    item.setOffset("idle", {rotation:-2});                    item.setOffset("down", {scaleX:0.1, scaleY:-0.15, rotation:-8,y:65});                }else{                    item.setOffset("up", {x:-5, y:-25, rotation:7, scaleX: 0.04, scaleY: 0.25});                    item.setOffset("idle", {x:-3, rotation:2});                    item.setOffset("down", {scaleX:0.15, scaleY:-0.25, rotation:2, y:65});                }                _faceElements_obj[$pos_str + "Socket"] = item;                //reflection in eye                item = new DisplayFaceComponent(GET_MOVIE(eye_mc, "reflection_mc"));                item.setOffset("up",{y:-30});                item.setOffset("down",{y:20});                item.setOffset("idle",{y:-5});                _faceElements_obj[$pos_str + "Reflection"] = item;            }            var eyes_mc:MovieClip = GET_MOVIE(_content_mc, "eyes_mc");            var eye_mc:MovieClip = GET_MOVIE(eyes_mc, "rightEye_mc");            processEyeElements(this, eye_mc,"right");            eye_mc = GET_MOVIE(eyes_mc, "leftEye_mc");            processEyeElements(this, eye_mc,"left");            //            _mic = Microphone.getMicrophone();            var st:SoundTransform = new SoundTransform(0);            _mic.soundTransform = st;            _mic.setSilenceLevel(DataConfigManager.GET_INSTANCE().getConfigInt(Defines.CONFIG_MIN_VOL));            _mic.setLoopBack(true);            _mic.setUseEchoSuppression(true);            _currentVolume_num = 0;        }        //        public override function destroy($event:Event = null):void {            _timer.stop();            _blink_timer.stop();            _idle_timer.stop();            super.destroy($event);        }        //        public function setAnimState($anim_str:String,$speed_num:Number = 2,$yoyo_bool:Boolean = false,$tweenFunc:Object = null):void {            _idle_timer.stop();            for (var i:String in _faceElements_obj) {                var item:DisplayFaceComponent = _faceElements_obj[i] as DisplayFaceComponent;                item.setAnimState($anim_str, $speed_num, $yoyo_bool, $tweenFunc);            }            _currentAnim_str = $anim_str;        }        //        public function resetAnim():void {            if (_currentAnim_str != "") {                setAnimState("",0.3);            }            _idle_timer.reset();            _idle_timer.start();        }        //        protected override function onAddedToStage($event:Event = null):void {            var interval_int:int = int(1000/stage.frameRate);            _timer = new Timer(interval_int);            _timer.addEventListener(TimerEvent.TIMER,onTimerEvent);            _timer.start();            //            interval_int = Math.round(Math.random() * 10) * 1000;            _blink_timer = new Timer(interval_int);            _blink_timer.addEventListener(TimerEvent.TIMER, onBlinkTimerEvent);            _blink_timer.start();            //            _idle_timer = new Timer(1000,1);            _idle_timer.addEventListener(TimerEvent.TIMER, onIdleTimerEvent);            _idle_timer.start();            //            stage.addEventListener(MouseEvent.MOUSE_DOWN,onStageMouseDown);            stage.addEventListener(MouseEvent.MOUSE_UP,onStageMouseUp);        }        //        private function onTimerEvent($event:TimerEvent):void {            var width_int:int = DataConfigManager.GET_INSTANCE().getConfigInt(Defines.CONFIG_FULL_WIDTH);            if  (width_int == 0) width_int = Defines.FULL_WIDTH_INT;            var halfway_x:Number = width_int * 0.5;            if (stage.mouseX < halfway_x) {                Mouse.hide();            }else{                Mouse.show();            }            var x:Number = Math.max(Math.min(1,(stage.mouseX - halfway_x) / halfway_x),0);            _faceElements_obj["leftPupil"].setFrameProgress(x);            _faceElements_obj["rightPupil"].setFrameProgress(x);            _faceElements_obj["leftEyeBall"].setFrameProgress(x);            _faceElements_obj["rightEyeBall"].setFrameProgress(x);            //            for (var i:String in _faceElements_obj) {                var item:DisplayFaceComponent = _faceElements_obj[i] as DisplayFaceComponent;                item.checkTargetFrame();            }            //            var maxVol_int:int = DataConfigManager.GET_INSTANCE().getConfigInt(Defines.CONFIG_MAX_VOL);            _currentVolume_num = Math.max(Math.min(1,_mic.activityLevel/maxVol_int),_currentVolume_num * 0.6);            _faceElements_obj["jaw"].setFrameProgress(_currentVolume_num);            _faceElements_obj["nose"].setFrameProgress(_currentVolume_num);            _faceElements_obj["brow"].setFrameProgress(_currentVolume_num);            _faceElements_obj["leftEye"].setFrameProgress(_currentVolume_num);            _faceElements_obj["rightEye"].setFrameProgress(_currentVolume_num);            //            var y:Number = 0.5;            if (_currentAnim_str == "up") y = 0.3;            if (_currentAnim_str == "down") y = 0.7;            positionSignal.dispatch(x,y);        }        //        private function onBlinkTimerEvent($event:TimerEvent):void {            _leftEyeLid_mc.gotoAndPlay(2);            _rightEyeLid_mc.gotoAndPlay(2);            _blink_timer.reset();            _blink_timer.delay = Math.round(Math.random() * 10) * 1000;            _blink_timer.start();        }        //        private function onIdleTimerEvent($event:TimerEvent):void {            setAnimState("idle",2,true);        }        //        private function onStageMouseDown($event:MouseEvent):void {            //open his eyes wide..            setAnimState("up",1,false, Elastic.easeOut);        }        //        private function onStageMouseUp($event:MouseEvent):void {            resetAnim();            _idle_timer.reset();            _idle_timer.start();        }        //        public function get currentAnim_str():String {            return _currentAnim_str;        }        //        public function get mask_mc():MovieClip {            return _mask_mc;        }        //        public function getScale():Number {            return _content_mc.scaleX;        }	}}